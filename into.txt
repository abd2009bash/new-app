tname.value,tmail.value,tphone.value,taddress.value,.value,quran.value,arabic.value,bilogy.value,chimastry.value,mathmatic.value,english.value




def main(page: ft.Page):
    def go_home(e):
        page.go("/")

    page.title = "Another Page"
    page.add(
        ft.Text("This is Another Page"),
        ft.ElevatedButton("Back to Home", on_click=go_home)
    )

ft.app(target=main, view=ft.WEB_BROWSER)

===================================
import flet as ft
from yt_dlp import YoutubeDL
import threading
import tkinter as tk
from tkinter import filedialog

def main(page: ft.Page):
    page.title = "YouTube Video Downloader"
    page.vertical_alignment = ft.MainAxisAlignment.CENTER

    url_input = ft.TextField(label="YouTube URL", width=400)
    path_input = ft.TextField(label="Save Path", width=300, read_only=True)
    browse_button = ft.ElevatedButton(text="Browse", on_click=lambda _: browse_path(path_input))
    path_row = ft.Row([path_input, browse_button])
    progress_bar = ft.ProgressBar(width=400)
    progress_text = ft.Text("0%")
    download_button = ft.ElevatedButton(text="Download", on_click=lambda _: start_download(url_input.value, path_input.value, progress_bar, progress_text))
    credit_text = ft.Text("Developed by [Your Name]", size=12, color=ft.colors.GREY, alignment=ft.Alignment.CENTER)

    page.add(url_input, path_row, download_button, progress_bar, progress_text, credit_text)

def browse_path(path_input):
    root = tk.Tk()
    root.withdraw()
    path = filedialog.askdirectory()
    path_input.value = path
    path_input.update()

def start_download(url, path, progress_bar, progress_text):
    def download():
        ydl_opts = {
            'outtmpl': f'{path}/%(title)s.%(ext)s',
            'progress_hooks': [lambda d: update_progress(d, progress_bar, progress_text)]
        }
        with YoutubeDL(ydl_opts) as ydl:
            ydl.download([url])

    threading.Thread(target=download).start()

def update_progress(d, progress_bar, progress_text):
    if d['status'] == 'downloading':
        total_bytes = d.get('total_bytes') or d.get('total_bytes_estimate')
        downloaded_bytes = d.get('downloaded_bytes')
        progress = downloaded_bytes / total_bytes
        progress_bar.value = progress
        progress_text.value = f"{int(progress * 100)}%"
        progress_bar.update()
        progress_text.update()
    elif d['status'] == 'finished':
        progress_bar.value = 1
        progress_text.value = "Download Complete"
        progress_bar.update()
        progress_text.update()

ft.app(target=main)




00000000000000000000000000
from flet import *
import sqlite3

######### Ù‚Ø§Ø¹Ø¯Ø© Ø§Ù„Ø¨ÙŠØ§Ù†Ø§Øª ###########
conn = sqlite3.connect("data.db", check_same_thread=False)
cursor = conn.cursor()
cursor.execute(""" CREATE TABLE IF NOT EXISTS student 
        (id INTEGER PRIMARY KEY,
stdname TEXT,
stdphone TEXT,
stdaddress TEXT,
squran INTEGER,
sarabic INTEGER,
sbilogy INTEGER,
schimastry INTEGER,
senglish INTEGER,
smathss INTEGER); 
""")
conn.commit()

def main(page: Page):
    page.title = "abboud"
    page.scroll = 'auto'
    page.window.top = 1
    page.window.left = 960
    page.window.width = 390
    page.window.height = 740
    page.bgcolor = 'white'
    page.theme_mode = ThemeMode.LIGHT
    phh = PermissionHandler()
    page.overlay.append(phh)

    ###########################
    table_name = 'student'
    
    def update_count():
        query = f'SELECT COUNT(*) FROM {table_name}'
        cursor.execute(query)
        result = cursor.fetchone()
        count = result[0]
        count_text.value = f"Total Students: {count}"
        page.update()

    count_text = Text()
    page.add(count_text)
    update_count()

    def add(e):
        cursor.execute("""INSERT INTO student(stdname, stdphone, stdaddress, squran, sarabic, sbilogy, schimastry, senglish, smathss) VALUES(?,?,?,?,?,?,?,?,?)""",
                       (tname.value, tphone.value, taddress.value, dquran.value, darabic.value, dbilogy.value, dchimastry.value, denglish.value, dmathss.value))
        conn.commit()
        update_count()

    def show(e):
        page.clean()
        c = conn.cursor()
        c.execute("SELECT * FROM student")
        users = c.fetchall()
        print(users)
        keys = ['id', 'stdname', 'stdphone', 'stdaddress', 'squran', 'sarabic', 'sbilogy', 'schimastry', 'senglish', 'smathss']
        result = [dict(zip(keys, values)) for values in users]
        for x in result:
            ########### marks ##########
            m = x['smathss']
            q = x['squran']
            a = x['sarabic']
            p = x['sbilogy']
            c = x['schimastry']
            e = x['senglish']
            res = m + q + a + p + c + e
            resum = (m + q + a + p + c + e) / 6
            if res < 50:
                s = Text('Ø±Ø§Ø³Ø¨ ðŸ˜’')
            if res > 50:
                s = Text('Ù†Ø§Ø¬Ø­ ðŸ˜Š')
            #######################3
            page.add(
                Card(
                    color='#ccc',
                    content=Container(
                        content=Column([
                            ListTile(
                                leading=Icon(icons.PERSON),
                                title=Text('Name: ' + x['stdname'])
                            ),
                            ListTile(
                                leading=Icon(icons.PHONE),
                                title=Text('Phone: ' + x['stdphone'])
                            ),
                            ListTile(
                                leading=Icon(icons.LOCATION_CITY),
                                title=Text('Address: ' + x['stdaddress'])
                            ),
                            Row([
                                Text('Ø¯Ø±Ø¬Ø§Øª Ø§Ù„Ø·Ø§Ù„Ø¨', size=16)
                            ], alignment=MainAxisAlignment.CENTER),
                            Row([
                                Text('Ø§Ù„Ø§Ø³Ù„Ø§Ù…ÙŠØ©: ' + str(x['squran'])),
                                Text('Ø§Ù„Ø¹Ø±Ø¨ÙŠ: ' + str(x['sarabic'])),
                                Text('Ø§Ù„Ø§Ø­ÙŠØ§Ø¡: ' + str(x['sbilogy']))
                            ], alignment=MainAxisAlignment.CENTER),
                            Row([
                                Text('Ø§Ù„ÙƒÙŠÙ…ÙŠØ§Ø¡: ' + str(x['schimastry'])),
                                Text('Ø§Ù„Ø±ÙŠØ§Ø¶ÙŠØ§Øª: ' + str(x['smathss'])),
                                Text('Ø§Ù„Ø§Ù†ÙƒÙ„ÙŠØ²ÙŠ: ' + str(x['senglish']))
                            ], alignment=MainAxisAlignment.CENTER),
                            Row([
                                Text('Ø§Ù„Ù…Ø¹Ø¯Ù„ :  ' + str(resum))
                            ], alignment=MainAxisAlignment.CENTER),
                            Row([
                                s
                            ], alignment=MainAxisAlignment.CENTER),
                        ]))),
                Row([
                    lineblack
                ], alignment=MainAxisAlignment.CENTER, rtl=True)
            )
        page.update()

    # Add your input fields and buttons here
    # For example:
    tname = TextField(label="Name")
    tphone = TextField(label="Phone")
    taddress = TextField(label="Address")
    dquran = TextField(label="Islamic")
    darabic = TextField(label="Arabic")
    dbilogy = TextField(label="Biology")
    dchimastry = TextField(label="Chemistry")
    denglish = TextField(label="English")
    dmathss = TextField(label="Maths")
    add_button = ElevatedButton("Add Student", on_click=add)
    show_button = ElevatedButton("Show Students", on_click=show)

    page.add(tname, tphone, taddress, dquran, darabic, dbilogy, dchimastry, denglish, dmathss, add_button, show_button)

flet.app(target=main)
